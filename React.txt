
● What is Emmet?

EMMET:
It allows you to type shortcuts that are then expanded into full pieces of code 
Helps you write HTML and CSS faster by using simple abbreviations that are then converted into code blocks.

https://docs.emmet.io/cheat-sheet/

However, there is one minor drawback; by default, Emmet is not enabled for React in VS Code.


● Difference between a Library and Framework?   
JS libraries give developers predefined methods and classes to help them work faster and more efficiently.
 On the other hand, the JS framework acts as a framework for developers to construct apps for specific platforms.

The term "inversion of control" describes the technical distinction between a framework and a library. 
You have complete control over the application's flow when you use a library. You get to decide when and where you want to call the library.
While when using a framework, the flow is controlled by the framework itself. It gives you various locations to plug in your code, 
but it only calls the code you've plugged in when it's needed.

● What is CDN? Why do we use it?
CDN(Content Delivery Network) is a group of servers which work together to provide fast delivery of Internet content.
A CDN allows for the quick transfer of assets needed for loading Internet content including HTML pages, javascript files, stylesheets, images, and videos.
We use it for the following benefits
Improved website loading times
Reducing banwidth costs
Increased content availability
Improving website security

● Why is React known as React?
React was developed for applications (Facebook) that have constantly changing data. 
Since React is a front-end framework or the “View” in MVC, this means that as the user clicks around 
and changes the app’s data, the view should “react” or change with those user events. 
User events being mouse clicks, typing, submitting a form.

● What is crossorigin in script tag?
The crossorigin attribute sets the mode of the request to an HTTP CORS Request. Web pages often make requests to load resources on other servers. 
Here is where CORS comes in. A cross-origin request is a request for a resource (e.g. style sheets, iframes, images, fonts, or scripts) from another domain
If you serve React from a CDN, we recommend to keep the crossorigin attribute set:

<script crossorigin src="..."></script>
We also recommend to verify that the CDN you are using sets the Access-Control-Allow-Origin: 
This enables a better error handling experience in React 16 and later.

● What is diference between React and ReactDOM


react is for the components and react-dom is for rendering the components in the DOM. 
'react-dom' acts as a glue between components and DOM. You will be using render() method of the react-dom to render components in the DOM 
The react package contains React.createElement, React.createClass and React.Component, React.PropTypes, React.Children,
 and the other helpers related to elements and component classes. We think of these as the isomorphic or universal helpers that you need to build components.

The react-dom package contains ReactDOM.render, ReactDOM.unmountComponentAtNode, and ReactDOM.findDOMNode, 
and in react-dom/server we have server-side rendering support with ReactDOMServer.renderToString and ReactDOMServer.renderToStaticMarkup.

● What is difference between react.development.js and react.production.js files via CDN?

Production CDN file of react is just a minified and optimized version that makes rendering of file on end user's browser very quick and performance enhancing.
Development CDN file is solely for local development purposes
It will take more time to build compared to production build

● What is async and defer? -
In async, the html parsing will go on with the script fetching and once that is done it will wait till all scripts executed and then go ahead with the parsing
In defer the html parsing will go on with script fetching , once it fetched it will be stopped and the parsing will finish first and once thats done will the script start execution
Async will not guarantee the order of execution of scripts but defer does
Async is not good with multiple dependent scripts so better to go with defer 
If we have to load some external scripts like mostly Google analytics better to use async

Defer is always a better alternative to async 

1. What is a bundler?
A bundler is a development tool that combines many JavaScript code files into a single one that is production-ready loadable in the browser
For example:
	1. parcel
	2. webpack (used by create-react-app) and
	3. vite ( prounounced as veet)
2. npm :
1. About :
It is a tool used for package managemnet.
Note :
npm does not stand for node package manager but everything else.
	1. npm alternative -> yarn
2. npm setup :
npm init
npm init -y can be used to skip the setup step, npm takes care of it and creates the package.json json file automatically , but without configurations.

3. Difference betweeen package.json and package-lock.json.
	1. package.json :
	• this file is mandatory for every project
	• It contains basicinformation about the project
	• Application name/version/scripts (ng scripts)
	2. package-lock.json :
	• This file is automatically generated for those operations where npm modifies either the node_module tree or package-json.
	• It is generated after an npm install
	• It allows future devs & automated systems to download the same dependencies as the project.
	• it also allows to go back to the past version of the dependencies without actual ‘committing the node_modules folder.
	• It records the same version of the installed packages which allows to reinstall them. Futuee installs wll be capable of building identical description tree.
	3. ~ or ^ in package.json file : These are used with the versions of the package installed.
For example in package.json file:
"dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  }
	• ~ : we can use it for minor version updates for a package.
	• ^ : we can use it for major version updates for a package.
If none of them is present , that means only the version specified in package.json file is used in the development.

3. Parcel:
Parcel is a bundler used for development and productions purposes.
Parcel Features:
	• HMR - Hot Module Replacement - parcel keeps track of file changes via file watcher algorithm and renders the changes in the files
	• File watcher algorithm - made with C++
	• MINIFY
	• BUNDLING
	• Cleaning our code
	• DEV and production Build
	• Super fast building algorithm
	• does image optimization also
	• Caching while development
	• Compresses
	• Compatible with older version of browser
	• HTTPS in dev
	• port Number
	• Consistent hashin algorithm
	• Zero Configuration
installation commands:
	1. Install:
npm install -D parcel
-D is used for development and as a development dependency.
	2. Parcel Commands :
	• For development build:
npx parcel <entry_point> 
	• For production build :
npx parcel build <entry_point> 

4. Why react is fast?
It is not only the virtual DOM that makes React faster but other components like bundlers (e.g. parcel, webpack ,vite etc. ) and development ecosystme also.
5. Transitive dependencies:
It is a type of dependency where one dependency requires another dependency to work properly and another dependency requires an another dependecy.

6. devDependencies vs dependency :
A dependency is a library that a project needs to function effectively. DevDependencies are the packages a developer needs during development.

1. What is JSX?
JSX is a syntex extension created by Facebook. JSX is a JavaScript Extension Syntax used in React to easily write HTML  like code and JavaScript together.
It makes us easy to understand the code and makes the code easy to maintain.
2. Superpowers of JSX.
	• Easy to maintain
	• Secure
	• Easy to debug
3. Role of type attribute in script tag? What options can I use there?
The type attribute in the script tag defines the type of script that we we want to run inside our app. type attribute can be of the following types:
	• text/javascript : It is the basic standard of writing javascript code inside the <script> tag.
e.g
<script type="text/javascript">
    const a = "Hello";
    const b = "World!";
    console.log(a + " " + b); // Hello World!
</script>
	• text/ecmascript : this value indicates that the script is following the EcmaScript standards.
	• module: This value tells the browser that the script is a module that can import or export other files or modules inside it.
	• text/babel : This value indicates that the script is a babel type and required bable to transpile it.
	• text/typescript: As the name suggest the script is written in TypeScript.
4. {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.
	• {TitleComponent}: This value describes the TitleComponent as a javascript variable expession or a value. The {} can embed a javascript expression or a values inside it.
	• <TitleComponent/> : This value represents a Component that is basically returning Some JSX value. in simple terms TitleComponent a function that is returning a JSX value. A compoenet is written inside the {< />} expression.
	• <TitleComponent></TitleComponent> : <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only when < TitleComponent /> has no children components.The opening and closing tags are created to include the child components.
e.g.
<TitleComponent>
    <ChildComponen1 />
    <ChildComponen2 />
    <ChildComponen3 />
</TitleComponent>
